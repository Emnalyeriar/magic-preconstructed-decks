#!/usr/bin/env ruby

require "set"
require "pathname"
require "pathname-glob"

class ValidateCardNames
  def initialize(card_list_path)
    @valid_card_list = Pathname(card_list_path).readlines.map(&:chomp).to_set
  end

  def data_root
    @data_root ||= Pathname(__dir__) + "../data"
  end

  def deck_files
    data_root.glob("*/*/*.txt")
  end

  def find_duplicates(list)
    list.map(&:last).group_by(&:itself).map{|k,v| [k,v.size]}.select{|k,v| v > 1}
  end

  def call
    deck_files.each do |path|
      cards = []
      sideboard = []
      target = cards
      comment_lines = path.readlines.map(&:chomp)
      comment_lines.each do |line|
        target = sideboard if line == "Sideboard"
        next unless line =~ /\A(\d+) (.*)/
        target << [$1.to_i, $2.sub(/\**\z/, "").tr("รปรถ", "uo")]
      end

      find_duplicates(cards).each do |card_name, count|
        puts "#{path}: #{card_name} occurs #{count} times"
      end
      find_duplicates(sideboard).each do |card_name, count|
        puts "#{path}: #{card_name} occurs #{count} times"
      end

      (cards+sideboard).map(&:last).uniq.each do |card_name|
        next if @valid_card_list.include?(card_name)
        if card_name.include?("//")
          a, b = card_name.split(" // ")
          next if @valid_card_list.include?(a) and @valid_card_list.include?(b)
        end
        puts "#{path}: Unknown card: #{card_name.inspect}"
      end
    end
  end
end

unless ARGV.size == 1
  STDERR.puts "Usage: #{$0} valid_card_list.txt"
  exit 1
end

ValidateCardNames.new(ARGV[0]).call
