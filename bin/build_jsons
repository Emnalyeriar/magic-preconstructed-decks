#!/usr/bin/env ruby

require "json"
require "pathname"
require "pathname-glob"
# Ruby 2.3 or older
require "hash-polyfill" unless Hash.method_defined?(:compact)
require_relative "../lib/deck"
require_relative "../lib/deck_types"
require_relative "../lib/sets"

class BuildJsons
  def initialize
    @decks = []
  end

  def data_root
    @data_root ||= Pathname(__dir__) + "../data"
  end

  def add_deck(name, deck, set_code, set_name, deck_type)
    deck_data = {
      name: name,
      type: deck_type,
      set_name: set_name,
      set_code: set_code,
      release_date: deck.release_date,
      cards: deck.card_data,
      sideboard: deck.sideboard_data,
      commander: deck.commander_data,
      source: deck.source,
      display: deck.display,
  }.compact
    @decks << deck_data
  end

  def ensure_deck_size(path, deck, sizes)
    return unless sizes # Box sets can have any size, it's fine

    actual = "#{deck.size}+#{deck.sideboard_size}+#{deck.commander_size}"
    allowed = sizes.map{|d,s,c| "#{d}+#{s||0}+#{c||0}"}

    unless allowed.include?(actual)
      warn "#{path}: Size is #{actual}, expected one of #{allowed.join(" ")}"
    end
  end

  def validate_and_add_deck(path, deck)
    name = path.basename(".txt").to_s
    set_code = path.parent.basename.to_s.sub(/_\z/, "")
    deck_type = path.parent.parent.basename.to_s
    set_name = MagicSets[set_code]
    unless set_name
      warn "Unknown set #{set_code}, skipping"
      return
    end
    type = DeckTypes[deck_type]
    if type
      ensure_deck_size(path, deck, type[:sizes])
      add_deck(name, deck, set_code, set_name, type[:name])
    else
      warn "Unknown deck type #{deck_type} of #{deck.size}+#{deck.sideboard_size}, skipping"
    end
  end

  def save_jsons(out)
    out.puts JSON.pretty_generate(@decks)
  end

  def build(save_path)
    data_root.glob("*/*/*.txt").each do |path|
      deck = Deck.new(path)
      validate_and_add_deck path, deck
    end
    @decks.sort_by!{|d| [d[:set_code], d[:name]]}

    if save_path
      open(save_path, "w"){|fh| save_jsons(fh)}
    else
      # save_jsons(STDOUT)
    end
  end
end

BuildJsons.new.build(ARGV[0])
