#!/usr/bin/env ruby

require "json"
require "pathname"
require "pathname-glob"
require_relative "../lib/deck"
require_relative "../lib/sets"

class BuildJsons
  def initialize
    @decks = []
  end

  def data_root
    @data_root ||= Pathname(__dir__) + "../data"
  end

  def add_deck(name, deck, set_code, set_name, deck_type)
    deck_data = {
      name: name,
      type: deck_type,
      set_name: set_name,
      set_code: set_code,
      cards: deck.card_data,
      sideboard: deck.sideboard_data,
    }
    @decks << deck_data
  end

  def ensure_deck_size(path, deck, size, sideboard_size)
    unless deck.size == size and deck.sideboard_size == sideboard_size
      warn "#{path}: Expected #{size}+#{sideboard_size} cards, not #{deck.size}+#{deck.sideboard_size}"
    end
  end

  def validate_and_add_deck(path, deck)
    name = path.basename(".txt").to_s
    set_code = path.parent.basename.to_s
    deck_type = path.parent.parent.basename.to_s
    case deck_type
    when "pw"
      ensure_deck_size(path, deck, 60, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Planeswalker Deck")
    when "cmd"
      ensure_deck_size(path, deck, 99, 1)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Commander Deck")
    when "intro"
      ensure_deck_size(path, deck, 60, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Intro Pack")
    when "intro-41"
      ensure_deck_size(path, deck, 41, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Intro Pack")
    when "theme"
      ensure_deck_size(path, deck, 60, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Theme Deck")
    when "theme-40"
      ensure_deck_size(path, deck, 40, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Theme Deck")
    when "event"
      ensure_deck_size(path, deck, 60, 15)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Event Deck")
    when "duel"
      ensure_deck_size(path, deck, 60, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Duel Deck")
    when "dotp"
      ensure_deck_size(path, deck, 60, 0)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Duel Of The Planeswalkers Deck")
    when "archenemy"
      unless deck.size == 60 and [0,20].include?(deck.sideboard_size)
        warn "#{path}: Expected 60+0/20 cards, not #{deck.size}+#{deck.sideboard_size}"
      end
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Archenemy Deck")
    when "planechase"
      ensure_deck_size(path, deck, 60, 10)
      add_deck(name, deck, set_code, MagicSets.fetch(set_code), "Planechase Deck")
    else
      raise
    end
  end

  def save_jsons(out)
    out.puts JSON.pretty_generate(@decks)
  end

  def build(save_path)
    data_root.glob("*/*/*.txt").each do |path|
      deck = Deck.new(path)
      validate_and_add_deck path, deck
    end
    @decks.sort_by!{|d| [d[:set_code], d[:name]]}

    if save_path
      open(save_path, "w"){|fh| save_jsons(fh)}
    else
      save_jsons(STDOUT)
    end
  end
end

BuildJsons.new.build(ARGV[0])
